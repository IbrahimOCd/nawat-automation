{"name": "test_all_classes_filter", "status": "failed", "statusDetails": {"message": "Failed: No class items were found in the sidebar. Check if the page loaded correctly.", "trace": "class_filter_page = <pages.access.school_card.class_filter_page.ClassFilterPage object at 0x000001D02B7AB040>\n\n    @allure.feature(\"Student Management\")\n    @allure.story(\"Class Filtering\")\n    def test_all_classes_filter(class_filter_page):\n        \"\"\"Test filtering students by all available class levels\"\"\"\n    \n        # Initialize tracking variables\n        classes_tested = []\n        classes_with_students = []\n        classes_without_students = []\n        classes_with_mismatches = {}\n        classes_with_errors = []\n    \n        # Get all sidebar items at once to avoid state changes\n        print(\"Getting all sidebar items...\")\n        sidebar_items = class_filter_page.get_all_sidebar_items()\n    \n        # Filter only class items\n        class_items = [(element, title) for element, title, is_class in sidebar_items if is_class]\n    \n        print(f\"Found {len(class_items)} class items to test\")\n    \n        if len(class_items) == 0:\n            # If no classes found, try to get items again after a short wait\n            print(\"No classes found, waiting and retrying...\")\n            time.sleep(2)\n            sidebar_items = class_filter_page.get_all_sidebar_items()\n            class_items = [(element, title) for element, title, is_class in sidebar_items if is_class]\n            print(f\"Retry found {len(class_items)} class items\")\n    \n        # Process each class\n        for i, (element, title) in enumerate(class_items):\n            try:\n                print(f\"Testing class {i+1}/{len(class_items)}: {title}\")\n    \n                # Click on the class item\n                click_success = class_filter_page.click_sidebar_item_safe(element, title)\n    \n                if not click_success:\n                    classes_with_errors.append(f\"{title} (click failed)\")\n                    continue\n    \n                classes_tested.append(title)\n    \n                # Check if there are students with retry logic\n                has_students_attempts = 0\n                max_attempts = 3\n                has_students = False\n    \n                while has_students_attempts < max_attempts:\n                    has_students = class_filter_page.has_students()\n                    if has_students:\n                        break\n    \n                    has_students_attempts += 1\n                    if has_students_attempts < max_attempts:\n                        print(f\"No students found for {title}, retrying... (attempt {has_students_attempts + 1})\")\n                        time.sleep(1)\n    \n                if has_students:\n                    classes_with_students.append(title)\n                    print(f\"Found students in class: {title}\")\n    \n                    # Verify students match the class\n                    success, details = class_filter_page.verify_students_match_class(title)\n    \n                    if not success and 'mismatched_students' in details:\n                        classes_with_mismatches[title] = details['mismatched_students']\n                        print(f\"Found {len(details['mismatched_students'])} mismatched students in {title}\")\n                    else:\n                        print(f\"All students match class: {title}\")\n                else:\n                    classes_without_students.append(title)\n                    print(f\"No students found in class: {title}\")\n    \n                # Brief pause between classes\n                time.sleep(0.5)\n    \n            except Exception as e:\n                error_msg = f\"{title} (error: {str(e)})\"\n                classes_with_errors.append(error_msg)\n                print(f\"Error processing class {title}: {e}\")\n    \n                # Try to recover by waiting\n                try:\n                    class_filter_page.wait_for_page_loaded()\n                except:\n                    pass\n    \n                continue\n    \n        # Create detailed summary of mismatched students\n        mismatched_summary = \"\"\n        if classes_with_mismatches:\n            for class_name, mismatched in classes_with_mismatches.items():\n                mismatched_summary += f\"\\nClass: {class_name}\\n\"\n                mismatched_summary += f\"Total mismatched students: {len(mismatched)}\\n\"\n                mismatched_summary += \"Student details:\\n\"\n    \n                for student in mismatched:\n                    mismatched_summary += f\"- Student #{student['index']}: {student['name']} (ID: {student['id']})\\n\"\n                    mismatched_summary += f\"  Expected class: {student['expected_class']}\\n\"\n                    mismatched_summary += f\"  Actual class: {student['actual_class']}\\n\"\n    \n        # Generate comprehensive summary report\n        summary = (f\"CLASS FILTER TEST SUMMARY\\n\" +\n                  f\"=\" * 50 + \"\\n\\n\" +\n                  f\"Total Classes Found: {len(class_items)}\\n\" +\n                  f\"Classes Successfully Tested: {len(classes_tested)}\\n\" +\n                  f\"Classes with Students: {len(classes_with_students)}\\n\" +\n                  f\"Classes without Students: {len(classes_without_students)}\\n\" +\n                  f\"Classes with Mismatched Students: {len(classes_with_mismatches)}\\n\" +\n                  f\"Classes with Errors: {len(classes_with_errors)}\\n\\n\" +\n    \n                  f\"CLASSES TESTED ({len(classes_tested)}):\\n\" +\n                  f\"- {', '.join(classes_tested)}\\n\\n\" +\n    \n                  f\"CLASSES WITH STUDENTS ({len(classes_with_students)}):\\n\" +\n                  f\"- {', '.join(classes_with_students)}\\n\\n\" +\n    \n                  f\"CLASSES WITHOUT STUDENTS ({len(classes_without_students)}):\\n\" +\n                  f\"- {', '.join(classes_without_students)}\\n\\n\")\n    \n        if classes_with_errors:\n            summary += f\"CLASSES WITH ERRORS ({len(classes_with_errors)}):\\n\"\n            summary += f\"- {', '.join(classes_with_errors)}\\n\\n\"\n    \n        if classes_with_mismatches:\n            summary += f\"CLASSES WITH MISMATCHED STUDENTS ({len(classes_with_mismatches)}):\\n\"\n            summary += f\"- {', '.join(classes_with_mismatches.keys())}\\n\"\n            summary += f\"\\nDETAILED MISMATCHES:{mismatched_summary}\"\n    \n        # Attach summary to allure report\n        allure.attach(summary, name=\"Test Summary\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Take a final screenshot\n        try:\n            class_filter_page.page.screenshot(path=\"reports/screenshots/test_complete.png\")\n        except:\n            pass\n    \n        # Print summary to console\n        print(\"\\n\" + summary)\n    \n        # Assertions with better error messages\n        if len(class_items) == 0:\n>           pytest.fail(\"No class items were found in the sidebar. Check if the page loaded correctly.\")\nE           Failed: No class items were found in the sidebar. Check if the page loaded correctly.\n\ntests\\acces\\test_class_filters.py:160: Failed"}, "description": "Test filtering students by all available class levels", "attachments": [{"name": "Test Summary", "source": "e47d341f-5ae2-49c2-a87a-8c96cba7ce07-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "9c9815b2-9705-43a4-8bfb-3cd9434cabc1-attachment.txt", "type": "text/plain"}], "start": 1747815490582, "stop": 1747815493520, "uuid": "309c86c2-33f1-41e2-8636-3be5cf5db629", "historyId": "3da7e31da9be5c62f5a4ef8d202e69e7", "testCaseId": "3da7e31da9be5c62f5a4ef8d202e69e7", "fullName": "tests.acces.test_class_filters#test_all_classes_filter", "labels": [{"name": "story", "value": "Class Filtering"}, {"name": "feature", "value": "Student Management"}, {"name": "parentSuite", "value": "tests.acces"}, {"name": "suite", "value": "test_class_filters"}, {"name": "host", "value": "DESKTOP-LKP4IQM"}, {"name": "thread", "value": "20048-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.acces.test_class_filters"}]}