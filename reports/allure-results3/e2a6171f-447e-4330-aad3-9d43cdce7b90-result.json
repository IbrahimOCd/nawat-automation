{"name": "test_all_classes_filter", "status": "failed", "statusDetails": {"message": "AssertionError: No classes were tested\nassert 0 > 0\n +  where 0 = len([])", "trace": "class_filter_page = <pages.access.school_card.class_filter_page.ClassFilterPage object at 0x000001DD663A70A0>\n\n    @allure.feature(\"Student Management\")\n    @allure.story(\"Class Filtering\")\n    def test_all_classes_filter(class_filter_page):\n        \"\"\"Test filtering students by all available class levels\"\"\"\n    \n        # Get all sidebar items at once\n        all_items = class_filter_page.get_all_sidebar_items()\n    \n        if not all_items:\n            pytest.fail(\"No sidebar items found\")\n    \n        # Initialize tracking variables\n        classes_tested = []\n        classes_with_students = []\n        classes_without_students = []\n        classes_with_mismatches = {}\n        all_items_clicked = []\n    \n        print(f\"Found {len(all_items)} total sidebar items\")\n    \n        # Process each item - single pass approach\n        for item, title, index in all_items:\n            try:\n                print(f\"Processing item {index}: {title}\")\n    \n                # Click on the item and wait for loading\n                if class_filter_page.click_sidebar_item(item, title):\n                    all_items_clicked.append(title)\n    \n                    # Check if this is a class item (has parentheses)\n                    if class_filter_page.is_class_item(title):\n                        print(f\"  -> This is a CLASS: {title}\")\n                        classes_tested.append(title)\n    \n                        # Check if there are students for this class\n                        if class_filter_page.has_students():\n                            print(f\"  -> Found students in class: {title}\")\n                            classes_with_students.append(title)\n    \n                            # Verify students match the class\n                            success, details = class_filter_page.verify_students_match_class(title)\n    \n                            if not success:\n                                if 'mismatched_students' in details and details['mismatched_students']:\n                                    print(f\"  -> Found {len(details['mismatched_students'])} mismatched students\")\n                                    classes_with_mismatches[title] = details['mismatched_students']\n                                elif 'error' in details:\n                                    print(f\"  -> Error verifying students: {details['error']}\")\n                            else:\n                                print(f\"  -> All {details.get('total', 0)} students match the class\")\n                        else:\n                            print(f\"  -> No students found in class: {title}\")\n                            classes_without_students.append(title)\n                    else:\n                        print(f\"  -> This is NOT a class: {title}\")\n                else:\n                    print(f\"  -> Failed to click item: {title}\")\n                    allure.attach(f\"Failed to click on item: {title}\",\n                                name=f\"Click Error - {title}\",\n                                attachment_type=allure.attachment_type.TEXT)\n    \n            except Exception as e:\n                error_msg = f\"Error processing item '{title}' at index {index}: {str(e)}\"\n                print(f\"  -> ERROR: {error_msg}\")\n                allure.attach(error_msg,\n                            name=f\"Processing Error - {title}\",\n                            attachment_type=allure.attachment_type.TEXT)\n                continue\n    \n        # Create detailed summary of mismatched students\n        mismatched_summary = \"\"\n        if classes_with_mismatches:\n            for class_name, mismatched in classes_with_mismatches.items():\n                mismatched_summary += f\"\\nClass: {class_name}\\n\"\n                mismatched_summary += f\"Total mismatched students: {len(mismatched)}\\n\"\n                mismatched_summary += \"Student details:\\n\"\n    \n                for student in mismatched:\n                    mismatched_summary += f\"- Student #{student['index']}: {student['name']} (ID: {student['id']})\\n\"\n                    mismatched_summary += f\"  Expected class: {student['expected_class']}\\n\"\n                    mismatched_summary += f\"  Actual class: {student['actual_class']}\\n\"\n    \n        # Generate comprehensive summary report\n        summary = (f\"TEST SUMMARY\\n\\n\" +\n                  f\"Total Sidebar Items Found: {len(all_items)}\\n\" +\n                  f\"Total Items Clicked: {len(all_items_clicked)}\\n\" +\n                  f\"Total Classes Found: {len([item for item in all_items if class_filter_page.is_class_item(item[1])])}\\n\" +\n                  f\"Classes Successfully Tested: {len(classes_tested)}\\n\\n\" +\n                  f\"Classes Tested ({len(classes_tested)}):\\n\" +\n                  f\"- {', '.join(classes_tested)}\\n\\n\" +\n                  f\"Classes with Students ({len(classes_with_students)}):\\n\" +\n                  f\"- {', '.join(classes_with_students)}\\n\\n\" +\n                  f\"Classes without Students ({len(classes_without_students)}):\\n\" +\n                  f\"- {', '.join(classes_without_students)}\\n\\n\" +\n                  f\"Classes with Mismatched Students ({len(classes_with_mismatches)}):\\n\" +\n                  f\"- {', '.join(classes_with_mismatches.keys())}\")\n    \n        if mismatched_summary:\n            summary += f\"\\n\\nDETAILED MISMATCHES:{mismatched_summary}\"\n    \n        allure.attach(summary, name=\"Comprehensive Test Summary\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Take a screenshot at the end\n        try:\n            class_filter_page.page.screenshot(path=\"reports/screenshots/test_complete.png\")\n            allure.attach.file(\"reports/screenshots/test_complete.png\",\n                              name=\"Final Screenshot\",\n                              attachment_type=allure.attachment_type.PNG)\n        except:\n            pass\n    \n        # Print summary to console\n        print(\"\\n\" + \"=\"*50)\n        print(\"FINAL TEST RESULTS:\")\n        print(f\"Total items found: {len(all_items)}\")\n        print(f\"Classes tested: {len(classes_tested)}\")\n        print(f\"Classes with students: {len(classes_with_students)}\")\n        print(f\"Classes without students: {len(classes_without_students)}\")\n        print(f\"Classes with mismatches: {len(classes_with_mismatches)}\")\n        print(\"=\"*50)\n    \n        # Assertions\n        assert len(all_items) > 0, \"No sidebar items found\"\n>       assert len(classes_tested) > 0, \"No classes were tested\"\nE       AssertionError: No classes were tested\nE       assert 0 > 0\nE        +  where 0 = len([])\n\ntests\\acces\\test_class_filters.py:138: AssertionError"}, "description": "Test filtering students by all available class levels", "attachments": [{"name": "Click Error - Tous", "source": "032f060f-3c4d-4583-9957-d04f1904c7d7-attachment.txt", "type": "text/plain"}, {"name": "Comprehensive Test Summary", "source": "455dd23b-3055-4f26-b547-0be981dd3cf2-attachment.txt", "type": "text/plain"}, {"name": "Final Screenshot", "source": "49edd63c-8690-4c3a-a1fb-690aa45a55e7-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "1d2aab90-cca5-430d-b503-1a2b0736bd50-attachment.txt", "type": "text/plain"}], "start": 1747756095264, "stop": 1747756129347, "uuid": "84bc76e8-7a2a-42b8-a28d-433f17b538bb", "historyId": "3da7e31da9be5c62f5a4ef8d202e69e7", "testCaseId": "3da7e31da9be5c62f5a4ef8d202e69e7", "fullName": "tests.acces.test_class_filters#test_all_classes_filter", "labels": [{"name": "feature", "value": "Student Management"}, {"name": "story", "value": "Class Filtering"}, {"name": "parentSuite", "value": "tests.acces"}, {"name": "suite", "value": "test_class_filters"}, {"name": "host", "value": "DESKTOP-LKP4IQM"}, {"name": "thread", "value": "16620-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.acces.test_class_filters"}]}