{"name": "test_all_classes_filter", "status": "failed", "statusDetails": {"message": "AssertionError: No class items found. Total items: 5\nassert 0 > 0\n +  where 0 = len([])", "trace": "class_filter_page = <pages.access.school_card.class_filter_page.ClassFilterPage object at 0x00000286AA5A7100>\n\n    @allure.feature(\"Student Management\")\n    @allure.story(\"Class Filtering\")\n    def test_all_classes_filter(class_filter_page):\n        \"\"\"Test filtering students by all available class levels - optimized version\"\"\"\n    \n        # Get all sidebar items at once for better performance\n        all_items = class_filter_page.get_all_sidebar_items()\n    \n        if not all_items:\n            pytest.fail(\"No sidebar items found\")\n    \n        # Separate classes from other items\n        class_items = []\n        other_items = []\n    \n        for item, title, index in all_items:\n            if class_filter_page.is_class_item(title):\n                class_items.append((item, title, index))\n            else:\n                other_items.append((item, title, index))\n    \n        # Initialize tracking variables\n        classes_tested = []\n        classes_with_students = []\n        classes_without_students = []\n        classes_with_mismatches = {}\n    \n        # Test all class items\n        for item, title, index in class_items:\n            try:\n                # Click on the class item\n                if class_filter_page.click_sidebar_item(item, title):\n                    classes_tested.append(title)\n    \n                    # Check if there are students\n                    if class_filter_page.has_students():\n                        classes_with_students.append(title)\n    \n                        # Verify students match the class\n                        success, details = class_filter_page.verify_students_match_class(title)\n    \n                        if not success and 'mismatched_students' in details and details['mismatched_students']:\n                            # Store mismatched students with class\n                            classes_with_mismatches[title] = details['mismatched_students']\n                    else:\n                        classes_without_students.append(title)\n                else:\n                    allure.attach(f\"Failed to click on class: {title}\",\n                                name=f\"Click Error - {title}\",\n                                attachment_type=allure.attachment_type.TEXT)\n    \n            except Exception as e:\n                # Log the error but continue with other classes\n                allure.attach(f\"Error testing class '{title}': {str(e)}\",\n                            name=f\"Class Test Error - {title}\",\n                            attachment_type=allure.attachment_type.TEXT)\n                continue\n    \n        # Test a few other items to ensure navigation works\n        items_to_test = min(5, len(other_items))  # Test up to 5 non-class items\n        for item, title, index in other_items[:items_to_test]:\n            try:\n                class_filter_page.click_sidebar_item(item, title)\n            except:\n                continue\n    \n        # Create detailed summary of mismatched students\n        mismatched_summary = \"\"\n        if classes_with_mismatches:\n            for class_name, mismatched in classes_with_mismatches.items():\n                mismatched_summary += f\"\\nClass: {class_name}\\n\"\n                mismatched_summary += f\"Total mismatched students: {len(mismatched)}\\n\"\n                mismatched_summary += \"Student details:\\n\"\n    \n                for student in mismatched:\n                    mismatched_summary += f\"- Student #{student['index']}: {student['name']} (ID: {student['id']})\\n\"\n                    mismatched_summary += f\"  Expected class: {student['expected_class']}\\n\"\n                    mismatched_summary += f\"  Actual class: {student['actual_class']}\\n\"\n    \n        # Generate comprehensive summary report\n        summary = (f\"TEST SUMMARY\\n\\n\" +\n                  f\"Total Items Found: {len(all_items)}\\n\" +\n                  f\"Total Classes Found: {len(class_items)}\\n\" +\n                  f\"Total Other Items: {len(other_items)}\\n\\n\" +\n                  f\"Classes Tested ({len(classes_tested)}):\\n\" +\n                  f\"- {', '.join(classes_tested)}\\n\\n\" +\n                  f\"Classes with Students ({len(classes_with_students)}):\\n\" +\n                  f\"- {', '.join(classes_with_students)}\\n\\n\" +\n                  f\"Classes without Students ({len(classes_without_students)}):\\n\" +\n                  f\"- {', '.join(classes_without_students)}\\n\\n\" +\n                  f\"Classes with Mismatched Students ({len(classes_with_mismatches)}):\\n\" +\n                  f\"- {', '.join(classes_with_mismatches.keys())}\")\n    \n        if mismatched_summary:\n            summary += f\"\\n\\nDETAILED MISMATCHES:{mismatched_summary}\"\n    \n        allure.attach(summary, name=\"Comprehensive Test Summary\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Take a screenshot at the end\n        try:\n            class_filter_page.page.screenshot(path=\"reports/screenshots/test_complete.png\")\n        except:\n            pass\n    \n        # Assertions\n>       assert len(class_items) > 0, f\"No class items found. Total items: {len(all_items)}\"\nE       AssertionError: No class items found. Total items: 5\nE       assert 0 > 0\nE        +  where 0 = len([])\n\ntests\\acces\\test_class_filters.py:120: AssertionError"}, "description": "Test filtering students by all available class levels - optimized version", "attachments": [{"name": "Comprehensive Test Summary", "source": "e37fa850-7f4e-4f89-b8f3-8a811cac9faf-attachment.txt", "type": "text/plain"}], "start": 1747755560804, "stop": 1747755585549, "uuid": "a68c2eed-1c2e-41e4-b433-bed4bd872090", "historyId": "3da7e31da9be5c62f5a4ef8d202e69e7", "testCaseId": "3da7e31da9be5c62f5a4ef8d202e69e7", "fullName": "tests.acces.test_class_filters#test_all_classes_filter", "labels": [{"name": "feature", "value": "Student Management"}, {"name": "story", "value": "Class Filtering"}, {"name": "parentSuite", "value": "tests.acces"}, {"name": "suite", "value": "test_class_filters"}, {"name": "host", "value": "DESKTOP-LKP4IQM"}, {"name": "thread", "value": "19752-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.acces.test_class_filters"}]}