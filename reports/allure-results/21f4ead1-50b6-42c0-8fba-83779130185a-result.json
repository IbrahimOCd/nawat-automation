{"name": "test_language_switching[en]", "status": "broken", "statusDetails": {"message": "playwright._impl._api_types.TimeoutError: Timeout 30000ms exceeded.\n=========================== logs ===========================\ntaking page screenshot\n============================================================", "trace": "page = <Page url='https://dev.nawat.ma/web/login'>, language_code = 'en'\n\n    @allure.feature(\"Login\")\n    @allure.story(\"Language Switching\")\n    @pytest.mark.parametrize(\"language_code\", [\"en\", \"fr\", \"ar\"])\n    def test_language_switching(page, language_code):\n        \"\"\"Test switching between different languages on the login page\"\"\"\n        with allure.step(f\"Navigate to login page\"):\n            login_page = LoginPage(page)\n            login_page.navigate()\n    \n            # Take screenshot and attach to Allure\n            screenshot_path = f\"reports/screenshots/login_initial_{language_code}.png\"\n            os.makedirs(os.path.dirname(screenshot_path), exist_ok=True)\n            page.screenshot(path=screenshot_path)\n            allure.attach.file(screenshot_path, name=f\"Login Page - Initial ({language_code})\", attachment_type=allure.attachment_type.PNG)\n    \n        with allure.step(f\"Switch language to {language_code}\"):\n            # Switch language\n            success = login_page.switch_language(language_code)\n            assert success, f\"Failed to switch to {language_code}\"\n    \n            # Take screenshot and attach to Allure\n            screenshot_path = f\"reports/screenshots/language_{language_code}.png\"\n>           page.screenshot(path=screenshot_path)\n\ntests\\test_login.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\playwright\\sync_api\\_generated.py:9991: in screenshot\n    self._sync(\nvenv\\lib\\site-packages\\playwright\\_impl\\_page.py:676: in screenshot\n    encoded_binary = await self._channel.send(\"screenshot\", params)\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:461: in wrap_api_call\n    return await cb()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Channel object at 0x0000020EB5C94040>\nmethod = 'screenshot', params = {}, return_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        callback = self._connection._send_message_to_server(self._guid, method, params)\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._api_types.TimeoutError: Timeout 30000ms exceeded.\nE       =========================== logs ===========================\nE       taking page screenshot\nE       ============================================================\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:96: TimeoutError"}, "description": "Test switching between different languages on the login page", "steps": [{"name": "Navigate to login page", "status": "passed", "attachments": [{"name": "Login Page - Initial (en)", "source": "5cc0b1f8-2b90-4cdf-9f21-04aee584bd9b-attachment.png", "type": "image/png"}], "start": 1747661757830, "stop": 1747661759678}, {"name": "Switch language to en", "status": "broken", "statusDetails": {"message": "playwright._impl._api_types.TimeoutError: Timeout 30000ms exceeded.\n=========================== logs ===========================\ntaking page screenshot\n============================================================\n", "trace": "  File \"C:\\Users\\lenovo\\Desktop\\nawat-automation-master\\tests\\test_login.py\", line 51, in test_language_switching\n    page.screenshot(path=screenshot_path)\n  File \"C:\\Users\\lenovo\\Desktop\\nawat-automation-master\\venv\\lib\\site-packages\\playwright\\sync_api\\_generated.py\", line 9991, in screenshot\n    self._sync(\n  File \"C:\\Users\\lenovo\\Desktop\\nawat-automation-master\\venv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py\", line 104, in _sync\n    return task.result()\n  File \"C:\\Users\\lenovo\\Desktop\\nawat-automation-master\\venv\\lib\\site-packages\\playwright\\_impl\\_page.py\", line 676, in screenshot\n    encoded_binary = await self._channel.send(\"screenshot\", params)\n  File \"C:\\Users\\lenovo\\Desktop\\nawat-automation-master\\venv\\lib\\site-packages\\playwright\\_impl\\_connection.py\", line 61, in send\n    return await self._connection.wrap_api_call(\n  File \"C:\\Users\\lenovo\\Desktop\\nawat-automation-master\\venv\\lib\\site-packages\\playwright\\_impl\\_connection.py\", line 461, in wrap_api_call\n    return await cb()\n  File \"C:\\Users\\lenovo\\Desktop\\nawat-automation-master\\venv\\lib\\site-packages\\playwright\\_impl\\_connection.py\", line 96, in inner_send\n    result = next(iter(done)).result()\n"}, "start": 1747661759678, "stop": 1747661792356}], "parameters": [{"name": "language_code", "value": "'en'"}], "start": 1747661757829, "stop": 1747661792357, "uuid": "4c8a1307-4919-4f63-9a33-97e589739faf", "historyId": "bf76b495276b7df6767e75653f142701", "testCaseId": "ea6997335ac840f3ae7367a2582bfbb6", "fullName": "tests.test_login#test_language_switching", "labels": [{"name": "feature", "value": "Login"}, {"name": "story", "value": "Language Switching"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "DESKTOP-LKP4IQM"}, {"name": "thread", "value": "15448-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}