{"name": "test_pagination", "status": "broken", "statusDetails": {"message": "playwright._impl._api_types.TimeoutError: Timeout 30000ms exceeded.\n=========================== logs ===========================\ntaking page screenshot\n============================================================", "trace": "student_page = <pages.access.school_card.student_inscrit_page.StudentInscritPage object at 0x0000021552D0BA90>\n\n    def test_pagination(student_page):\n        \"\"\"Test navigation between pages of students\"\"\"\n        # Get information from the first page\n        first_page_count = student_page.get_visible_students_count()\n    \n        # Only test pagination if we have a reasonable number of students\n        if first_page_count > 5:\n            # Get the first student name on the first page\n            first_page_students = student_page.get_students_info()\n            first_student_name = first_page_students[0][\"name\"] if first_page_students else \"Unknown\"\n    \n            # Navigate to the next page if possible\n            has_next_page = student_page.navigate_to_next_page()\n    \n            if has_next_page:\n                # Get the first student name on the second page\n                second_page_students = student_page.get_students_info()\n                second_student_name = second_page_students[0][\"name\"] if second_page_students else \"Unknown\"\n    \n                # Verify the pages are different\n                assert first_student_name != second_student_name, \"Next page navigation failed or showed same students\"\n    \n                # Take screenshot of the second page\n                student_page.page.screenshot(path=\"reports/screenshots/second_page.png\")\n    \n                # Navigate back to the first page\n                student_page.navigate_to_previous_page()\n    \n                # Verify we're back on the first page\n                back_to_first = student_page.get_students_info()\n                back_first_name = back_to_first[0][\"name\"] if back_to_first else \"Unknown\"\n    \n                assert first_student_name == back_first_name, \"Navigation back to first page failed\"\n    \n                # Take screenshot of returning to first page\n>               student_page.page.screenshot(path=\"reports/screenshots/back_to_first_page.png\")\n\ntests\\acces\\test_student_inscrit.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\playwright\\sync_api\\_generated.py:9991: in screenshot\n    self._sync(\nvenv\\lib\\site-packages\\playwright\\_impl\\_page.py:676: in screenshot\n    encoded_binary = await self._channel.send(\"screenshot\", params)\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:461: in wrap_api_call\n    return await cb()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Channel object at 0x0000021552D81480>, method = 'screenshot', params = {}, return_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        callback = self._connection._send_message_to_server(self._guid, method, params)\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._api_types.TimeoutError: Timeout 30000ms exceeded.\nE       =========================== logs ===========================\nE       taking page screenshot\nE       ============================================================\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:96: TimeoutError"}, "description": "Test navigation between pages of students", "start": 1747137178459, "stop": 1747137242757, "uuid": "b42d721a-c5c7-4479-86d2-7fea87aed1dd", "historyId": "caf6dbe09389d0f2b59e10de56300dab", "testCaseId": "caf6dbe09389d0f2b59e10de56300dab", "fullName": "tests.acces.test_student_inscrit#test_pagination", "labels": [{"name": "parentSuite", "value": "tests.acces"}, {"name": "suite", "value": "test_student_inscrit"}, {"name": "host", "value": "DESKTOP-LKP4IQM"}, {"name": "thread", "value": "17976-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.acces.test_student_inscrit"}]}