{"name": "test_radiee_archived_filter", "status": "broken", "statusDetails": {"message": "playwright._impl._api_types.Error: SyntaxError: missing ) after argument list\n    at eval (<anonymous>)\n    at UtilityScript.evaluate (<anonymous>:197:30)\n    at UtilityScript.<anonymous> (<anonymous>:1:44)", "trace": "self = <pages.access.school_card.student_filter_page.StudentFilterPage object at 0x0000019974397A00>\n\n    def check_all_students_class_is_empty(self):\n        \"\"\"Check if all visible student cards have empty class (--) information\"\"\"\n        # Get all student cards\n        student_cards = self.page.query_selector_all(self.STUDENT_CARDS)\n    \n        if len(student_cards) == 0:\n            print(\"No student cards found\")\n            return False\n    \n        # Check each card for empty class text\n        for card in student_cards:\n            try:\n>               class_text = card.text_content(self.STUDENT_CLASS)\nE               TypeError: ElementHandle.text_content() takes 1 positional argument but 2 were given\n\npages\\access\\school_card\\student_filter_page.py:168: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nfilter_page = <pages.access.school_card.student_filter_page.StudentFilterPage object at 0x0000019974397A00>\n\n    def test_radiee_archived_filter(filter_page):\n        \"\"\"Test the 'Radiée (Archivé)' filter functionality\"\"\"\n        # Apply the 'Radiée (Archivé)' filter\n        filter_page.apply_filter(filter_page.RADIEE_FILTER)\n    \n        # Verify the filter facet text\n        facet_text = filter_page.get_filter_facet_text()\n        assert facet_text == \"Radiée (Archivé)\", f\"Filter facet text is '{facet_text}' but expected 'Radiée (Archivé)'\"\n    \n        # Verify all students have 'Inscription radiée' label\n        assert filter_page.check_all_students_have_label(filter_page.RADIEE_LABEL), \"Not all students have 'Inscription radiée' label\"\n    \n        # Verify all students have empty class\n>       assert filter_page.check_all_students_class_is_empty(), \"Not all students have empty class information (--)\"\n\ntests\\acces\\test_student_filters.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\access\\school_card\\student_filter_page.py:174: in check_all_students_class_is_empty\n    class_text = self.page.evaluate(f\"\"\"\nvenv\\lib\\site-packages\\playwright\\sync_api\\_generated.py:8657: in evaluate\n    self._sync(\nvenv\\lib\\site-packages\\playwright\\_impl\\_page.py:411: in evaluate\n    return await self._main_frame.evaluate(expression, arg)\nvenv\\lib\\site-packages\\playwright\\_impl\\_frame.py:277: in evaluate\n    await self._channel.send(\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:461: in wrap_api_call\n    return await cb()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Channel object at 0x0000019974395510>, method = 'evaluateExpression'\nparams = {'arg': {'handles': [<playwright._impl._connection.Channel object at 0x00000199745242E0>], 'value': {'h': 0}}, 'expres...               return classElement ? classElement.textContent.trim() : null;\\n                    }\\n                \"}\nreturn_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        callback = self._connection._send_message_to_server(self._guid, method, params)\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._api_types.Error: SyntaxError: missing ) after argument list\nE           at eval (<anonymous>)\nE           at UtilityScript.evaluate (<anonymous>:197:30)\nE           at UtilityScript.<anonymous> (<anonymous>:1:44)\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:96: Error"}, "description": "Test the 'Radiée (Archivé)' filter functionality", "start": 1747149090913, "stop": 1747149101187, "uuid": "e9f58c59-58ab-49ea-b7d2-5e2192a10985", "historyId": "4a36375c8fc62eeb1f430ae04df30bca", "testCaseId": "4a36375c8fc62eeb1f430ae04df30bca", "fullName": "tests.acces.test_student_filters#test_radiee_archived_filter", "labels": [{"name": "parentSuite", "value": "tests.acces"}, {"name": "suite", "value": "test_student_filters"}, {"name": "host", "value": "DESKTOP-LKP4IQM"}, {"name": "thread", "value": "18776-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.acces.test_student_filters"}]}