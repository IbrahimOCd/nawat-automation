{"name": "test_all_classes_filter", "status": "failed", "statusDetails": {"message": "AssertionError: No classes found\nassert 0 > 0\n +  where 0 = len([])", "trace": "class_filter_page = <pages.access.school_card.class_filter_page.ClassFilterPage object at 0x00000275ABF393F0>\n\n    @allure.feature(\"Student Management\")\n    @allure.story(\"Class Filtering\")\n    def test_all_classes_filter(class_filter_page):\n        \"\"\"Test filtering students by all available class levels - FAST VERSION\"\"\"\n    \n        # Initialize tracking variables\n        classes_tested = []\n        classes_with_students = []\n        classes_without_students = []\n        classes_with_mismatches = {}\n        classes_with_errors = []\n    \n        # PHASE 1: FAST EXPANSION\n        print(\"🚀 PHASE 1: FAST EXPANSION\")\n        start_time = time.time()\n    \n        expansion_success = class_filter_page.expand_all_sidebar_items()\n    \n        # PHASE 2: FAST COLLECTION\n        print(\"📋 PHASE 2: COLLECTING CLASSES\")\n    \n        sidebar_items = class_filter_page.get_all_sidebar_items()\n        class_items = [(element, title) for element, title, is_class in sidebar_items if is_class]\n    \n        print(f\"⚡ Found {len(class_items)} classes in {time.time() - start_time:.1f}s\")\n    \n        if len(class_items) == 0:\n            # Quick retry\n            time.sleep(1)\n            class_filter_page.expand_all_sidebar_items()\n            sidebar_items = class_filter_page.get_all_sidebar_items()\n            class_items = [(element, title) for element, title, is_class in sidebar_items if is_class]\n            print(f\"⚡ Retry found {len(class_items)} classes\")\n    \n        # PHASE 3: FAST TESTING\n        print(\"🧪 PHASE 3: TESTING CLASSES\")\n    \n        # Process each class FAST\n        for i, (element, title) in enumerate(class_items):\n            try:\n                # Click fast\n                if not class_filter_page.click_sidebar_item_safe(element, title):\n                    classes_with_errors.append(f\"{title} (click failed)\")\n                    continue\n    \n                classes_tested.append(title)\n    \n                # Fast student check with single retry\n                has_students = class_filter_page.has_students()\n                if not has_students:\n                    # Single fast retry\n                    time.sleep(0.5)\n                    has_students = class_filter_page.has_students()\n    \n                if has_students:\n                    classes_with_students.append(title)\n    \n                    # Fast verification\n                    success, details = class_filter_page.verify_students_match_class(title)\n    \n                    if not success and 'mismatched_students' in details:\n                        classes_with_mismatches[title] = details['mismatched_students']\n                else:\n                    classes_without_students.append(title)\n    \n                # No pause between classes for speed\n    \n            except Exception as e:\n                classes_with_errors.append(f\"{title} (error: {str(e)})\")\n                continue\n    \n        # FAST SUMMARY\n        total_time = time.time() - start_time\n        print(f\"\\n⚡ COMPLETED IN {total_time:.1f}s\")\n    \n        # Compact summary\n        summary = (f\"FAST TEST RESULTS ({total_time:.1f}s)\\n\" +\n                  f\"Classes: {len(class_items)} found, {len(classes_tested)} tested\\n\" +\n                  f\"Students: {len(classes_with_students)} classes have students\\n\" +\n                  f\"Errors: {len(classes_with_errors)} classes failed\\n\" +\n                  f\"Mismatches: {len(classes_with_mismatches)} classes with wrong students\")\n    \n        if classes_with_mismatches:\n            for class_name, mismatched in classes_with_mismatches.items():\n                summary += f\"\\n❌ {class_name}: {len(mismatched)} mismatched students\"\n    \n        # Quick allure attach\n        allure.attach(summary, name=\"Fast Test Summary\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Print to console\n        print(summary)\n    \n        # Fast assertions\n>       assert len(class_items) > 0, \"No classes found\"\nE       AssertionError: No classes found\nE       assert 0 > 0\nE        +  where 0 = len([])\n\ntests\\acces\\test_class_filters.py:108: AssertionError"}, "description": "Test filtering students by all available class levels - FAST VERSION", "attachments": [{"name": "Fast Test Summary", "source": "d3bbc487-a809-4e27-95d8-c04ed247e30f-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "6783770c-cbaf-41f8-8302-be661c874897-attachment.txt", "type": "text/plain"}], "start": 1747817237935, "stop": 1747817247308, "uuid": "c745e3e3-c08b-4ad3-8f0b-8411d418ecc1", "historyId": "3da7e31da9be5c62f5a4ef8d202e69e7", "testCaseId": "3da7e31da9be5c62f5a4ef8d202e69e7", "fullName": "tests.acces.test_class_filters#test_all_classes_filter", "labels": [{"name": "feature", "value": "Student Management"}, {"name": "story", "value": "Class Filtering"}, {"name": "parentSuite", "value": "tests.acces"}, {"name": "suite", "value": "test_class_filters"}, {"name": "host", "value": "DESKTOP-LKP4IQM"}, {"name": "thread", "value": "20832-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.acces.test_class_filters"}]}