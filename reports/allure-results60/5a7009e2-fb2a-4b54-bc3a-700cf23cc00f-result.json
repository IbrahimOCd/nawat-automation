{"name": "test_all_classes_filter", "status": "broken", "statusDetails": {"message": "AttributeError: 'list' object has no attribute 'items'", "trace": "class_filter_page = <pages.access.school_card.class_filter_page.ClassFilterPage object at 0x00000262DD9A9CF0>\n\n    @allure.feature(\"Student Management\")\n    @allure.story(\"Class Filtering\")\n    def test_all_classes_filter(class_filter_page):\n        \"\"\"Test filtering students by all available class levels\"\"\"\n        # First phase: Expand everything in the sidebar\n        expanded_items = class_filter_page.expand_all_items()\n    \n        # Go back to the main view after expanding everything\n        class_filter_page.wait_for_page_loaded()\n    \n        # Second phase: Test classes (items with parentheses)\n        # Initialize tracking variables\n        classes_tested = []\n        classes_with_students = []\n        classes_without_students = []\n        classes_with_mismatches = {}  # Changed to dictionary to store mismatched students\n        # Process each item again\n        current_index = 1\n        max_attempts = 100  # Safety limit\n    \n        while current_index <= max_attempts:\n            try:\n                # Get the item\n                item, title = class_filter_page.get_sidebar_item(current_index)\n    \n                # If item doesn't exist, we've reached the end\n                if not item:\n                    break\n    \n    \n                # Only test classes (items with parentheses)\n                elif class_filter_page.is_class_item(title):\n                    # It's a class - click and test students\n                    class_filter_page.click_sidebar_item(item, title)\n                    classes_tested.append(title)\n    \n                    # Wait for page to load\n                    class_filter_page.wait_for_page_loaded()\n    \n                    # Check if there are students\n                    if class_filter_page.has_students():\n                        classes_with_students.append(title)\n                        class_filter_page.wait_for_page_loaded()\n    \n                        # Verify students match the class\n                        success, details = class_filter_page.verify_students_match_class(title)\n    \n                        if not success and 'mismatched_students' in details:\n                            # Store mismatched students with class\n                            classes_with_mismatches[title] = details['mismatched_students']\n                    else:\n                        classes_without_students.append(title)\n    \n                    # Navigate back\n                    class_filter_page.wait_for_page_loaded()\n                else:\n                    # Not a class - just click and move on\n                    class_filter_page.click_sidebar_item(item, title)\n    \n                    # Navigate back\n                    class_filter_page.wait_for_page_loaded()\n    \n                # Move to the next item\n                current_index += 1\n            except Exception as e:\n                # Log the error\n                allure.attach(f\"Error processing item at index {current_index}: {str(e)}\",\n                            name=\"Process Error\",\n                            attachment_type=allure.attachment_type.TEXT)\n    \n                # Try to recover by navigating back\n                try:\n                     class_filter_page.wait_for_page_loaded()\n                except:\n                    pass\n    \n                # Move to the next item\n                current_index += 1\n    \n        # Create detailed summary of mismatched students\n        mismatched_summary = \"\"\n        for class_name, mismatched in classes_with_mismatches.items():\n            mismatched_summary += f\"\\nClass: {class_name}\\n\"\n            mismatched_summary += f\"Total mismatched students: {len(mismatched)}\\n\"\n            mismatched_summary += \"Student details:\\n\"\n    \n            for student in mismatched:\n                mismatched_summary += f\"- Student #{student['index']}: {student['name']} (ID: {student['id']})\\n\"\n                mismatched_summary += f\"  Expected class: {student['expected_class']}\\n\"\n                mismatched_summary += f\"  Actual class: {student['actual_class']}\\n\"\n    \n        # Generate summary report\n        summary = (f\"TEST SUMMARY\\n\\n\" +\n                  f\"Classes Tested ({len(classes_tested)}):\\n\" +\n                  f\"- {', '.join(classes_tested)}\\n\\n\" +\n                  f\"Classes with Students ({len(classes_with_students)}):\\n\" +\n                  f\"- {', '.join(classes_with_students)}\\n\\n\" +\n                  f\"Classes without Students ({len(classes_without_students)}):\\n\" +\n                  f\"- {', '.join(classes_without_students)}\\n\\n\" +\n                  f\"Classes with Mismatched Students ({len(classes_with_mismatches)}):\\n\" +\n                  f\"- {', '.join(classes_with_mismatches.keys())}\")\n>       for class_name, matchingSts in classes_with_students.items():\nE       AttributeError: 'list' object has no attribute 'items'\n\ntests\\acces\\test_class_filters.py:117: AttributeError"}, "description": "Test filtering students by all available class levels", "start": 1747759863480, "stop": 1747759960215, "uuid": "1a2f47d7-a600-40ad-839a-d3c2699f6fe2", "historyId": "3da7e31da9be5c62f5a4ef8d202e69e7", "testCaseId": "3da7e31da9be5c62f5a4ef8d202e69e7", "fullName": "tests.acces.test_class_filters#test_all_classes_filter", "labels": [{"name": "story", "value": "Class Filtering"}, {"name": "feature", "value": "Student Management"}, {"name": "parentSuite", "value": "tests.acces"}, {"name": "suite", "value": "test_class_filters"}, {"name": "host", "value": "DESKTOP-LKP4IQM"}, {"name": "thread", "value": "19920-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.acces.test_class_filters"}]}